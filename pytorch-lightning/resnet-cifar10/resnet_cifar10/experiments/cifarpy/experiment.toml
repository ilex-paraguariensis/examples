[experiment]
restart = []
[[experiment.train]]
reference_key = "trainer"
function_call = "fit"

[experiment.train.params]
model = "{pl_model}"
datamodule = "{data}"
[[experiment.test]]
reference_key = "trainer"
function_call = "test"

[experiment.test.params]
model = "{pl_model}"
datamodule = "{data}"

[objects.trainer]
module = "pytorch_lightning"
class_name = "Trainer"

[objects.classifier]
module = "models.resnet.resnet"
class_name = "ResNet"

[objects.optimizer]
module = "torch.optim"
class_name = "Adam"

[objects.pl_model]
module = "trainers.base_classification.base_classification"
class_name = "LightningClassificationModule"

[objects.data]
module = "data.loaders.cifar10.data_loader"
class_name = "CifarLightningDataModule"

[objects.trainer.params]
gpus = 1
max_epochs = 100
precision = 16
gradient_clip_val = 0.5
enable_checkpointing = true
[[objects.trainer.params.callbacks]]
module = "pytorch_lightning.callbacks"
class_name = "EarlyStopping"

[objects.trainer.params.callbacks.params]
monitor = "val_loss"
patience = 10
mode = "min"
[[objects.trainer.params.callbacks]]
module = "pytorch_lightning.callbacks"
class_name = "ModelCheckpoint"

[objects.trainer.params.callbacks.params]
dirpath = "{save_dir}/checkpoints"
monitor = "val_loss"
save_top_k = 1
verbose = true
save_last = true
mode = "min"

[objects.classifier.params]
layers = [ 3, 4, 6, 3,]
num_classes = 10
in_channels = 3
zero_init_residual = false
groups = 1
width_per_group = 64
replace_stride_with_dilation = [ false, false, false,]

[objects.optimizer.params]
lr = 0.0004
betas = [ 0.5, 0.999,]

[objects.pl_model.params]
classifier = "{classifier}"

[objects.data.params]
location = "./data/cifar10"
batch_size = 32
image_size = [ 256, 256,]
crop_size = 4

[objects.trainer.params.logger]
module = "aim.pytorch_lightning"
class_name = "AimLogger"

[objects.classifier.params.block]
module = "models.resnet.resnet"
class_type = "BasicBlock"

[objects.classifier.params.norm_layer]
module = "torch.nn"
class_type = "BatchNorm2d"

[objects.optimizer.params.params]
reference_key = "classifier"
function_call = "parameters"

[objects.pl_model.params.optimizers]
optimizer = "{optimizer}"

[objects.trainer.params.logger.params]
experiment = "default"
train_metric_prefix = "train_"
val_metric_prefix = "val_"

[objects.optimizer.params.params.params]

[objects.pl_model.params.optimizers.lr_scheduler]
monitor = "val_loss"

[objects.pl_model.params.optimizers.lr_scheduler.scheduler]
module = "torch.optim.lr_scheduler"
class_name = "ReduceLROnPlateau"

[objects.pl_model.params.optimizers.lr_scheduler.scheduler.params]
optimizer = "{optimizer}"
mode = "min"
factor = 0.5
threshold = 1e-8
threshold_mode = "rel"
patience = 0
verbose = true
